To migrate from Log4j to SLF4J in the `ApiBuilder` class, you'll need to update the import statements, modify the logger initialization, and revise the logging calls if they involve concatenations or complex expressions. Here’s a step-by-step guide to implementing these changes:

### 1. Change Import Statements

Replace the import for Log4j with the corresponding import for SLF4J. Update:

```java
import org.apache.log4j.Logger;
```

to:

```java
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
```

### 2. Modify Logger Initialization

Change the logger initialization from using Log4j's `Logger.getLogger()` method to SLF4J's `LoggerFactory.getLogger()` method. Modify:

```java
private static final Logger LOGGER = Logger.getLogger(ApiBuilder.class);
```

to:

```java
private static final Logger LOGGER = LoggerFactory.getLogger(ApiBuilder.class);
```

### 3. Check and Update Logging Calls

If there are any logging calls that use string concatenation, convert them to use SLF4J’s parameterized messages. This avoids the computation of the string concatenation if the log level is not enabled, which can improve performance.

For example:

```java
LOGGER.trace("URL: " + searchUrl.toString());
```

should be changed to:

```java
LOGGER.trace("URL: {}", searchUrl.toString());
```

And:

```java
LOGGER.warn("Failed to create URL " + searchUrl.toString() + " - " + ex.toString());
```

to:

```java
LOGGER.warn("Failed to create URL {} - {}", searchUrl.toString(), ex.toString());
```

### Example of Updated Class with SLF4J

Here’s how the `ApiBuilder` class would look after implementing the changes to use SLF4J:

```java
package com.omertron.traileraddictapi.tools;

import com.omertron.traileraddictapi.TrailerAddictException;
import java.net.MalformedURLException;
import java.net.URL;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public final class ApiBuilder {
  private static final Logger LOGGER = LoggerFactory.getLogger(ApiBuilder.class);
  
  private static final String API_BASE = "http://api.traileraddict.com/";
  
  private static final String DELIMITER_FIRST = "?";
  
  private static final String DELIMITER_SUBSEQUENT = "&";
  
  private static final String PARAMETER_WIDTH = "width=";
  
  private static final String PARAMETER_COUNT = "count=";
  
  private static final String PARAMETER_FEATURED = "featured=";
  
  private static final String PARAMETER_FILM = "film=";
  
  private static final String PARAMETER_ACTOR = "actor=";
  
  private static final String PARAMETER_IMDB = "imdb=";
  
  private static final String FEATURED_YES = "yes";
  
  private static final String FEATURED_NO = "no";
  
  private static final int DEFAULT_INT = -1;
  
  private static final String DEFAULT_FEATURED = "yes";
  
  private static final int COUNT_MAX = 8;
  
  private ApiBuilder() {
    throw new UnsupportedOperationException("Class can not be initialised!");
  }
  
  private static URL buildUrl(String method, String value, int count, int width) throws TrailerAddictException {
    StringBuilder searchUrl = new StringBuilder(API_BASE);
    searchUrl.append(DELIMITER_FIRST).append(method).append(value);
    if (width != DEFAULT_INT) {
      searchUrl.append(DELIMITER_SUBSEQUENT);
      searchUrl.append(PARAMETER_WIDTH);
      searchUrl.append(width);
    } 
    int urlCount = validateCount(count);
    if (urlCount != DEFAULT_INT) {
      searchUrl.append(DELIMITER_SUBSEQUENT);
      searchUrl.append(PARAMETER_COUNT);
      searchUrl.append(urlCount);
    } 
    try {
      LOGGER.trace("URL: {}", searchUrl.toString());
      return new URL(searchUrl.toString());
    } catch (MalformedURLException ex) {
      LOGGER.warn("Failed to create URL {} - {}", searchUrl.toString(), ex.toString());
      throw new TrailerAddictException(TrailerAddictException.TrailerAddictExceptionType.INVALID_URL, searchUrl.toString(), ex);
    } 
  }
  
  private static int validateCount(int count) {
    if (count > COUNT_MAX)
      return COUNT_MAX; 
    if (count < -1)
      return DEFAULT_INT; 
    return count;
  }
  
  // Additional methods with similar updates to logging calls...
}
```

These changes effectively migrate the logging system of the `ApiBuilder` class from Log4j to SLF4J, enhancing the flexibility in terms of the underlying logging framework and potentially improving performance with parameterized logging capabilities.