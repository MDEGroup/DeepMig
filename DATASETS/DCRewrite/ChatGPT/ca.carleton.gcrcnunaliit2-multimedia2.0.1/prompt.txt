You are a code assistant. Given this Java class: 

package ca.carleton.gcrc.olkit.multimedia.converter.threshold;

import ca.carleton.gcrc.olkit.multimedia.converter.MultimediaConversionThreshold;
import java.io.PrintWriter;
import java.io.StringWriter;
import org.apache.log4j.Logger;

public class ThresholdVideo implements MultimediaConversionThreshold {
  protected static final Logger logger = Logger.getLogger(ThresholdVideo.class);
  
  public static ThresholdVideo parseString(String s) {
    String videoFormat = null;
    Long videoBitrate = null;
    String audioFormat = null;
    Long audioBitrate = null;
    Long size = null;
    String[] components = s.split(",");
    if (components.length != 5) {
      logger.error("Unable to parse image conversion threshold: " + s);
      return null;
    } 
    if (false == "*".equals(components[0].trim()))
      videoFormat = components[0].trim(); 
    if (false == "*".equals(components[1].trim()))
      videoBitrate = Long.valueOf(Long.parseLong(components[1].trim())); 
    if (false == "*".equals(components[2].trim()))
      audioFormat = components[2].trim(); 
    if (false == "*".equals(components[3].trim()))
      audioBitrate = Long.valueOf(Long.parseLong(components[3].trim())); 
    if (false == "*".equals(components[4].trim()))
      size = Long.valueOf(Long.parseLong(components[4].trim())); 
    return new ThresholdVideo(videoFormat, videoBitrate, audioFormat, audioBitrate, size, size);
  }
  
  private String videoFormat = null;
  
  private Long videoBitrate = null;
  
  private String audioFormat = null;
  
  private Long audioBitrate = null;
  
  private Long width = null;
  
  private Long height = null;
  
  public ThresholdVideo(String videoFormat, Long videoBitrate, String audioFormat, Long audioBitrate, Long width, Long height) {
    this.videoFormat = videoFormat;
    this.videoBitrate = videoBitrate;
    this.audioFormat = audioFormat;
    this.audioBitrate = audioBitrate;
    this.width = width;
    this.height = height;
  }
  
  public boolean isConversionRequired(String videoFormat, Long videoRate, String audioFormat, Long audioRate, Long imageWidth, Long imageHeight) {
    if (null != this.videoFormat && false == 
      this.videoFormat.equals(videoFormat))
      return true; 
    if (null != this.videoBitrate) {
      if (null == videoRate)
        return true; 
      if (videoRate.longValue() > this.videoBitrate.longValue())
        return true; 
    } 
    if (null != this.audioFormat && false == 
      this.audioFormat.equals(audioFormat))
      return true; 
    if (null != this.audioBitrate) {
      if (null == audioRate)
        return true; 
      if (audioRate.longValue() > this.audioBitrate.longValue())
        return true; 
    } 
    if (isResizeRequired(imageWidth, imageHeight))
      return true; 
    return false;
  }
  
  public boolean isResizeRequired(Long imageWidth, Long imageHeight) {
    if (null != this.width) {
      if (null == imageWidth)
        return true; 
      if (imageWidth.longValue() > this.width.longValue())
        return true; 
    } 
    if (null != this.height) {
      if (null == imageHeight)
        return true; 
      if (imageHeight.longValue() > this.height.longValue())
        return true; 
    } 
    return false;
  }
  
  public String toString() {
    StringWriter sw = new StringWriter();
    PrintWriter pw = new PrintWriter(sw);
    pw.print("video(");
    if (null != this.videoFormat) {
      pw.print(this.videoFormat);
    } else {
      pw.print("*");
    } 
    pw.print(",");
    if (null != this.videoBitrate) {
      pw.print(this.videoBitrate);
    } else {
      pw.print("*");
    } 
    pw.print(",");
    if (null != this.audioFormat) {
      pw.print(this.audioFormat);
    } else {
      pw.print("*");
    } 
    pw.print(",");
    if (null != this.audioBitrate) {
      pw.print(this.audioBitrate);
    } else {
      pw.print("*");
    } 
    pw.print(",");
    if (null != this.width) {
      pw.print(this.width);
    } else {
      pw.print("*");
    } 
    pw.print(",");
    if (null != this.height) {
      pw.print(this.height);
    } else {
      pw.print("*");
    } 
    pw.print(")");
    pw.flush();
    return sw.toString();
  }
}
write the needed code to perform the migration from log4j to slf4j library..