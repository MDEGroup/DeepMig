You are a Java code assistant. Given this Java class: 

package com.llsfw.core.controller.base;

import com.llsfw.core.common.ResourceBundleMessage;
import com.llsfw.core.service.datasource.DynamicDataSourceService;
import com.llsfw.generator.model.standard.system.TtDynamicDataSource;
import java.util.Enumeration;
import java.util.ResourceBundle;
import javax.servlet.http.HttpServletRequest;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.shiro.SecurityUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Controller;
import org.springframework.web.servlet.support.RequestContext;

@Controller
public class BaseController {
  private static final Logger LOG = LogManager.getLogger();
  
  @Autowired
  private DynamicDataSourceService ddss;
  
  @Autowired
  @Qualifier("messageSource")
  private ResourceBundleMessage messageSource;
  
  public void getLocalStript(HttpServletRequest req, String name) {
    RequestContext requestContext = new RequestContext(req);
    ResourceBundle rb = this.messageSource.getBundle("i18n.messages", requestContext.getLocale());
    Enumeration<String> keys = rb.getKeys();
    StringBuilder script = new StringBuilder();
    script.append("<script type='text/javascript'> \n");
    while (keys.hasMoreElements()) {
      String key = keys.nextElement();
      boolean flg = (key.startsWith("system.") || key.startsWith("base.") || key.startsWith("message.") || key.startsWith("validatebox."));
      if (flg || key.startsWith(name))
        script.append(" var " + key.replace(".", "_") + " = '" + requestContext.getMessage(key) + "';  \n"); 
    } 
    script.append("</script>");
    req.setAttribute("localStript", script.toString());
  }
  
  public String getLoginName() {
    return SecurityUtils.getSubject().getPrincipal().toString();
  }
  
  public TtDynamicDataSource getDynamicDataSoucre(String dataSourceName) {
    LOG.debug("load DynamicDataSource name is : " + dataSourceName);
    return this.ddss.getDataSourceData(dataSourceName);
  }
}


Can you show me just the required modification to perform the migration from log4j to slf4j library please?

To migrate the `BaseController` class from using Log4j to SLF4J, you'll need to change the logger import statements and update how you instantiate the logger. Here are the changes you should make:

### Modifications

**Before (using Log4j):**
```java
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

private static final Logger LOG = LogManager.getLogger();
```

**After (using SLF4J):**
```java
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

private static final Logger LOG = LoggerFactory.getLogger(BaseController.class);
```

These changes convert the logger setup to use SLF4J, which is a more flexible logging facade that can work with various logging implementations, including Log4j, Logback, and others. This is particularly useful in a Spring context where you might want to switch logging configurations without changing the application code.
