To migrate the `BaseController` class from using Log4j2 to the SLF4J library, the changes involve updating the import statement for the logger, changing how the logger is instantiated, and adjusting the logging method call to use SLF4J's parameterized logging. Here's the updated class with these changes:

```java
package com.llsfw.core.controller.base;

import com.llsfw.core.common.ResourceBundleMessage;
import com.llsfw.core.service.datasource.DynamicDataSourceService;
import com.llsfw.generator.model.standard.system.TtDynamicDataSource;
import java.util.Enumeration;
import java.util.ResourceBundle;
import javax.servlet.http.HttpServletRequest;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.apache.shiro.SecurityUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Controller;
import org.springframework.web.servlet.support.RequestContext;

@Controller
public class BaseController {
  private static final Logger LOG = LoggerFactory.getLogger(BaseController.class);
  
  @Autowired
  private DynamicDataSourceService ddss;
  
  @Autowired
  @Qualifier("messageSource")
  private ResourceBundleMessage messageSource;
  
  public void getLocalStript(HttpServletRequest req, String name) {
    RequestContext requestContext = new RequestContext(req);
    ResourceBundle rb = this.messageSource.getBundle("i18n.messages", requestContext.getLocale());
    Enumeration<String> keys = rb.getKeys();
    StringBuilder script = new StringBuilder();
    script.append("<script type='text/javascript'> \n");
    while (keys.hasMoreElements()) {
      String key = keys.nextElement();
      boolean flg = (key.startsWith("system.") || key.startsWith("base.") || key.startsWith("message.") || key.startsWith("validatebox."));
      if (flg || key.startsWith(name))
        script.append(" var " + key.replace(".", "_") + " = '" + requestContext.getMessage(key) + "';  \n"); 
    } 
    script.append("</script>");
    req.setAttribute("localStript", script.toString());
  }
  
  public String getLoginName() {
    return SecurityUtils.getSubject().getPrincipal().toString();
  }
  
  public TtDynamicDataSource getDynamicDataSoucre(String dataSourceName) {
    LOG.debug("load DynamicDataSource name is : {}", dataSourceName);
    return this.ddss.getDataSourceData(dataSourceName);
  }
}
```

### Key Changes:
1. **Logger Import**: Changed from `org.apache.logging.log4j.LogManager` and `org.apache.logging.log4j.Logger` to `org.slf4j.LoggerFactory` and `org.slf4j.Logger`.
2. **Logger Instantiation**: Changed from `LogManager.getLogger()` to `LoggerFactory.getLogger(BaseController.class)`.
3. **Logging Call**: Updated the logging call to use parameterized messages with `{}` as placeholders. This approach prevents unnecessary string concatenation when the log level is disabled.

These changes integrate SLF4J into your class, enhancing the flexibility to switch logging frameworks by just changing the logger binding without altering the source code.