You are a Java code assistant. Given this Java class: 

package com.omertron.traileraddictapi.tools;

import com.omertron.traileraddictapi.TrailerAddictException;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.apache.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.w3c.dom.Text;
import org.xml.sax.SAXException;

public class DOMHelper {
  private static final Logger LOGGER = Logger.getLogger(DOMHelper.class);
  
  private static final String YES = "yes";
  
  private static final String ENCODING = "UTF-8";
  
  protected DOMHelper() {
    throw new UnsupportedOperationException("Class can not be initialised!");
  }
  
  public static String getValueFromElement(Element element, String tagName) {
    NodeList elementNodeList = element.getElementsByTagName(tagName);
    if (elementNodeList == null)
      return ""; 
    Element tagElement = (Element)elementNodeList.item(0);
    if (tagElement == null)
      return ""; 
    NodeList tagNodeList = tagElement.getChildNodes();
    if (tagNodeList == null || tagNodeList.getLength() == 0)
      return ""; 
    return tagNodeList.item(0).getNodeValue();
  }
  
  public static synchronized Document getEventDocFromUrl(String url) throws TrailerAddictException {
    InputStream in = null;
    try {
      String webPage = WebBrowser.request(url);
      in = new ByteArrayInputStream(webPage.getBytes("UTF-8"));
    } catch (UnsupportedEncodingException ex) {
      throw new TrailerAddictException(TrailerAddictException.TrailerAddictExceptionType.INVALID_URL, "Unable to encode URL: " + url, ex);
    } 
    Document doc = null;
    try {
      DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
      DocumentBuilder db = dbf.newDocumentBuilder();
      doc = db.parse(in);
      doc.getDocumentElement().normalize();
    } catch (ParserConfigurationException error) {
      throw new TrailerAddictException(TrailerAddictException.TrailerAddictExceptionType.PARSE_ERROR, "Unable to parse TheTVDb response, please try again later.", error);
    } catch (SAXException error) {
      throw new TrailerAddictException(TrailerAddictException.TrailerAddictExceptionType.PARSE_ERROR, "Unable to parse TheTVDb response, please try again later.", error);
    } catch (IOException error) {
      throw new TrailerAddictException(TrailerAddictException.TrailerAddictExceptionType.PARSE_ERROR, "Unable to parse TheTVDb response, please try again later.", error);
    } finally {
      if (in != null)
        try {
          in.close();
        } catch (IOException error) {} 
    } 
    return doc;
  }
  
  public static String convertDocToString(Document doc) throws TransformerException {
    TransformerFactory transfac = TransformerFactory.newInstance();
    Transformer trans = transfac.newTransformer();
    trans.setOutputProperty("omit-xml-declaration", "yes");
    trans.setOutputProperty("indent", "yes");
    StringWriter sw = new StringWriter();
    StreamResult result = new StreamResult(sw);
    DOMSource source = new DOMSource(doc);
    trans.transform(source, result);
    return sw.toString();
  }
  
  public static boolean writeDocumentToFile(Document doc, String localFile) {
    try {
      TransformerFactory transfact = TransformerFactory.newInstance();
      Transformer trans = transfact.newTransformer();
      trans.setOutputProperty("omit-xml-declaration", "yes");
      trans.setOutputProperty("indent", "yes");
      trans.transform(new DOMSource(doc), new StreamResult(new File(localFile)));
      return true;
    } catch (TransformerConfigurationException error) {
      LOGGER.warn("Error writing the document to " + localFile);
      LOGGER.warn("Message: " + error.getMessage());
      return false;
    } catch (TransformerException error) {
      LOGGER.warn("Error writing the document to " + localFile);
      LOGGER.warn("Message: " + error.getMessage());
      return false;
    } 
  }
  
  public static void appendChild(Document doc, Element parentElement, String elementName, String elementValue) {
    Element child = doc.createElement(elementName);
    Text text = doc.createTextNode(elementValue);
    child.appendChild(text);
    parentElement.appendChild(child);
  }
}

write the needed code to perform the migration from log4j to slf4j library. Highlight the code changes needed to adapt the file please.

To migrate from Log4j to SLF4J in the provided Java class, follow these steps:

1. Replace the Log4j import statement with the SLF4J import statement.
2. Change the logger initialization.
3. Ensure that logging statements use the SLF4J logger.

Here are the changes highlighted in the code:

```java
package com.omertron.traileraddictapi.tools;

import com.omertron.traileraddictapi.TrailerAddictException;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
// Change the import statement for the logger
// import org.apache.log4j.Logger;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.w3c.dom.Text;
import org.xml.sax.SAXException;

public class DOMHelper {
  // Change logger initialization
  // private static final Logger LOGGER = Logger.getLogger(DOMHelper.class);
  private static final Logger LOGGER = LoggerFactory.getLogger(DOMHelper.class);
  
  private static final String YES = "yes";
  
  private static final String ENCODING = "UTF-8";
  
  protected DOMHelper() {
    throw new UnsupportedOperationException("Class can not be initialised!");
  }
  
  public static String getValueFromElement(Element element, String tagName) {
    NodeList elementNodeList = element.getElementsByTagName(tagName);
    if (elementNodeList == null)
      return ""; 
    Element tagElement = (Element)elementNodeList.item(0);
    if (tagElement == null)
      return ""; 
    NodeList tagNodeList = tagElement.getChildNodes();
    if (tagNodeList == null || tagNodeList.getLength() == 0)
      return ""; 
    return tagNodeList.item(0).getNodeValue();
  }
  
  public static synchronized Document getEventDocFromUrl(String url) throws TrailerAddictException {
    InputStream in = null;
    try {
      String webPage = WebBrowser.request(url);
      in = new ByteArrayInputStream(webPage.getBytes("UTF-8"));
    } catch (UnsupportedEncodingException ex) {
      throw new TrailerAddictException(TrailerAddictException.TrailerAddictExceptionType.INVALID_URL, "Unable to encode URL: " + url, ex);
    } 
    Document doc = null;
    try {
      DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
      DocumentBuilder db = dbf.newDocumentBuilder();
      doc = db.parse(in);
      doc.getDocumentElement().normalize();
    } catch (ParserConfigurationException error) {
      throw new TrailerAddictException(TrailerAddictException.TrailerAddictExceptionType.PARSE_ERROR, "Unable to parse TheTVDb response, please try again later.", error);
    } catch (SAXException error) {
      throw new TrailerAddictException(TrailerAddictException.TrailerAddictExceptionType.PARSE_ERROR, "Unable to parse TheTVDb response, please try again later.", error);
    } catch (IOException error) {
      throw new TrailerAddictException(TrailerAddictException.TrailerAddictExceptionType.PARSE_ERROR, "Unable to parse TheTVDb response, please try again later.", error);
    } finally {
      if (in != null)
        try {
          in.close();
        } catch (IOException error) {} 
    } 
    return doc;
  }
  
  public static String convertDocToString(Document doc) throws TransformerException {
    TransformerFactory transfac = TransformerFactory.newInstance();
    Transformer trans = transfac.newTransformer();
    trans.setOutputProperty("omit-xml-declaration", "yes");
    trans.setOutputProperty("indent", "yes");
    StringWriter sw = new StringWriter();
    StreamResult result = new StreamResult(sw);
    DOMSource source = new DOMSource(doc);
    trans.transform(source, result);
    return sw.toString();
  }
  
  public static boolean writeDocumentToFile(Document doc, String localFile) {
    try {
      TransformerFactory transfact = TransformerFactory.newInstance();
      Transformer trans = transfact.newTransformer();
      trans.setOutputProperty("omit-xml-declaration", "yes");
      trans.setOutputProperty("indent", "yes");
      trans.transform(new DOMSource(doc), new StreamResult(new File(localFile)));
      return true;
    } catch (TransformerConfigurationException error) {
      // Change logging statements
      // LOGGER.warn("Error writing the document to " + localFile);
      // LOGGER.warn("Message: " + error.getMessage());
      LOGGER.warn("Error writing the document to {}", localFile);
      LOGGER.warn("Message: {}", error.getMessage());
      return false;
    } catch (TransformerException error) {
      // Change logging statements
      // LOGGER.warn("Error writing the document to " + localFile);
      // LOGGER.warn("Message: " + error.getMessage());
      LOGGER.warn("Error writing the document to {}", localFile);
      LOGGER.warn("Message: {}", error.getMessage());
      return false;
    } 
  }
  
  public static void appendChild(Document doc, Element parentElement, String elementName, String elementValue) {
    Element child = doc.createElement(elementName);
    Text text = doc.createTextNode(elementValue);
    child.appendChild(text);
    parentElement.appendChild(child);
  }
}
```

### Summary of Changes:
1. **Logger Import**: Changed from Log4j to SLF4J (`import org.slf4j.Logger;` and `import org.slf4j.LoggerFactory;`).
2. **Logger Initialization**: Updated the logger initialization (`LoggerFactory.getLogger(DOMHelper.class)`).
3. **Logging Statements**: Updated the logging statements to use SLF4J's parameterized messages.

These modifications should migrate the logging from Log4j to SLF4J successfully.
