You are a Java code assistant. Given this Java class: 

package com.omertron.traileraddictapi.tools;

import com.omertron.traileraddictapi.TrailerAddictException;
import com.omertron.traileraddictapi.model.Trailer;
import com.omertron.traileraddictapi.model.TrailerSize;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

public final class TrailerAddictParser {
  private static final Logger LOGGER = Logger.getLogger(TrailerAddictParser.class);
  
  private TrailerAddictParser() {
    throw new UnsupportedOperationException("Class can not be initialised!");
  }
  
  public static List<Trailer> getTrailers(URL url) {
    Document doc;
    List<Trailer> trailers = new ArrayList<Trailer>();
    try {
      LOGGER.trace("Attempting to get trailer XML from " + url.toString());
      doc = DOMHelper.getEventDocFromUrl(url.toString());
    } catch (TrailerAddictException ex) {
      LOGGER.trace("Exception processing document; " + url.toString());
      LOGGER.trace("Exception: " + ex.getResponse());
      return trailers;
    } 
    NodeList nlTrailers = doc.getElementsByTagName("trailer");
    for (int loop = 0; loop < nlTrailers.getLength(); loop++) {
      Node nTrailer = nlTrailers.item(loop);
      if (nTrailer.getNodeType() == 1) {
        Element eTrailer = (Element)nTrailer;
        Trailer trailer = new Trailer();
        trailer.setCombinedTitle(DOMHelper.getValueFromElement(eTrailer, "title"));
        trailer.setLink(DOMHelper.getValueFromElement(eTrailer, "link"));
        String trailerId = DOMHelper.getValueFromElement(eTrailer, "trailer_id");
        if (StringUtils.isNumeric(trailerId))
          trailer.setTrailerId(Integer.parseInt(trailerId)); 
        trailer.setPublishDate(DOMHelper.getValueFromElement(eTrailer, "pubDate"));
        trailer.addEmbed(DOMHelper.getValueFromElement(eTrailer, "embed"));
        trailer.setTrailerTitle(DOMHelper.getValueFromElement(eTrailer, "video_title"));
        trailer.setDescription(DOMHelper.getValueFromElement(eTrailer, "description"));
        trailer.setFilmTitle(DOMHelper.getValueFromElement(eTrailer, "film"));
        trailer.addEmbed(TrailerSize.standard, DOMHelper.getValueFromElement(eTrailer, "embed_standard"));
        trailer.addEmbed(TrailerSize.small, DOMHelper.getValueFromElement(eTrailer, "embed_small"));
        trailer.addEmbed(TrailerSize.medium, DOMHelper.getValueFromElement(eTrailer, "embed_medium"));
        trailer.addEmbed(TrailerSize.large, DOMHelper.getValueFromElement(eTrailer, "embed_large"));
        trailer.setDirectors(DOMHelper.getValueFromElement(eTrailer, "director"));
        trailer.setWriters(DOMHelper.getValueFromElement(eTrailer, "writer"));
        trailer.setCast(DOMHelper.getValueFromElement(eTrailer, "cast"));
        trailer.setStudio(DOMHelper.getValueFromElement(eTrailer, "studio"));
        trailer.setReleaseDate(DOMHelper.getValueFromElement(eTrailer, "release_date"));
        trailers.add(trailer);
      } 
    } 
    LOGGER.trace("Found " + trailers.size() + " trailers for " + url.toString());
    return trailers;
  }
}

write the needed code to perform the migration from log4j to slf4j library. Highlight the code changes needed to adapt the file please.

To migrate from Log4j to SLF4J in the provided Java class, follow these steps:

1. Replace the Log4j import statement with the SLF4J import statement.
2. Change the logger initialization.
3. Ensure that logging statements use the SLF4J logger.

Here are the changes highlighted in the code:

```java
package com.omertron.traileraddictapi.tools;

import com.omertron.traileraddictapi.TrailerAddictException;
import com.omertron.traileraddictapi.model.Trailer;
import com.omertron.traileraddictapi.model.TrailerSize;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import org.apache.commons.lang3.StringUtils;
// Change the import statement for the logger
// import org.apache.log4j.Logger;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

public final class TrailerAddictParser {
  // Change logger initialization
  // private static final Logger LOGGER = Logger.getLogger(TrailerAddictParser.class);
  private static final Logger LOGGER = LoggerFactory.getLogger(TrailerAddictParser.class);
  
  private TrailerAddictParser() {
    throw new UnsupportedOperationException("Class can not be initialised!");
  }
  
  public static List<Trailer> getTrailers(URL url) {
    Document doc;
    List<Trailer> trailers = new ArrayList<Trailer>();
    try {
      // Change logging statement
      // LOGGER.trace("Attempting to get trailer XML from " + url.toString());
      LOGGER.trace("Attempting to get trailer XML from {}", url.toString());
      doc = DOMHelper.getEventDocFromUrl(url.toString());
    } catch (TrailerAddictException ex) {
      // Change logging statements
      // LOGGER.trace("Exception processing document; " + url.toString());
      // LOGGER.trace("Exception: " + ex.getResponse());
      LOGGER.trace("Exception processing document; {}", url.toString());
      LOGGER.trace("Exception: {}", ex.getResponse());
      return trailers;
    } 
    NodeList nlTrailers = doc.getElementsByTagName("trailer");
    for (int loop = 0; loop < nlTrailers.getLength(); loop++) {
      Node nTrailer = nlTrailers.item(loop);
      if (nTrailer.getNodeType() == 1) {
        Element eTrailer = (Element)nTrailer;
        Trailer trailer = new Trailer();
        trailer.setCombinedTitle(DOMHelper.getValueFromElement(eTrailer, "title"));
        trailer.setLink(DOMHelper.getValueFromElement(eTrailer, "link"));
        String trailerId = DOMHelper.getValueFromElement(eTrailer, "trailer_id");
        if (StringUtils.isNumeric(trailerId))
          trailer.setTrailerId(Integer.parseInt(trailerId)); 
        trailer.setPublishDate(DOMHelper.getValueFromElement(eTrailer, "pubDate"));
        trailer.addEmbed(DOMHelper.getValueFromElement(eTrailer, "embed"));
        trailer.setTrailerTitle(DOMHelper.getValueFromElement(eTrailer, "video_title"));
        trailer.setDescription(DOMHelper.getValueFromElement(eTrailer, "description"));
        trailer.setFilmTitle(DOMHelper.getValueFromElement(eTrailer, "film"));
        trailer.addEmbed(TrailerSize.standard, DOMHelper.getValueFromElement(eTrailer, "embed_standard"));
        trailer.addEmbed(TrailerSize.small, DOMHelper.getValueFromElement(eTrailer, "embed_small"));
        trailer.addEmbed(TrailerSize.medium, DOMHelper.getValueFromElement(eTrailer, "embed_medium"));
        trailer.addEmbed(TrailerSize.large, DOMHelper.getValueFromElement(eTrailer, "embed_large"));
        trailer.setDirectors(DOMHelper.getValueFromElement(eTrailer, "director"));
        trailer.setWriters(DOMHelper.getValueFromElement(eTrailer, "writer"));
        trailer.setCast(DOMHelper.getValueFromElement(eTrailer, "cast"));
        trailer.setStudio(DOMHelper.getValueFromElement(eTrailer, "studio"));
        trailer.setReleaseDate(DOMHelper.getValueFromElement(eTrailer, "release_date"));
        trailers.add(trailer);
      } 
    } 
    // Change logging statement
    // LOGGER.trace("Found " + trailers.size() + " trailers for " + url.toString());
    LOGGER.trace("Found {} trailers for {}", trailers.size(), url.toString());
    return trailers;
  }
}
```

### Summary of Changes:
1. **Logger Import**: Changed from Log4j to SLF4J (`import org.slf4j.Logger;` and `import org.slf4j.LoggerFactory;`).
2. **Logger Initialization**: Updated the logger initialization (`LoggerFactory.getLogger(TrailerAddictParser.class)`).
3. **Logging Statements**: Updated the logging statements to use SLF4J's parameterized messages.

These modifications should migrate the logging from Log4j to SLF4J successfully.
