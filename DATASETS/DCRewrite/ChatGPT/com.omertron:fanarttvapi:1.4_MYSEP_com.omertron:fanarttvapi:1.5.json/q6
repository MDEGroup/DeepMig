To migrate the `FilteringLayout` class from using Log4j to SLF4J, you need to consider that SLF4J doesn't support custom layouts in the way Log4j does, because SLF4J acts primarily as a facade to various logging frameworks including Log4j, Logback, and others.

SLF4J itself does not have a concept of `Layouts` as Log4j does. SLF4J is mostly used for its API with the actual logging handled by an underlying logging framework, such as Logback, which is conceptually similar to Log4j but more modern.

If you want to create custom log formats or filter sensitive information like API keys as in your example, you would typically handle this in the configuration of the logging backend (e.g., Logback) or by extending it directly if using Logback.

Here’s what you would generally need to do if switching to Logback:

### 1. Replace Log4j with Logback Dependencies

First, replace Log4j dependencies with Logback in your `pom.xml` or `build.gradle`.

### 2. Implement a Logback Layout or Converter

Since you are modifying log messages to mask API keys, you can create a custom Logback layout or a converter to replace the `PatternLayout`. Here is an example of a custom Logback converter:

```java
package com.omertron.fanarttvapi.tools;

import ch.qos.logback.classic.PatternLayout;
import ch.qos.logback.classic.encoder.PatternLayoutEncoder;
import ch.qos.logback.classic.spi.ILoggingEvent;
import ch.qos.logback.core.pattern.CompositeConverter;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class MaskingPatternLayout extends CompositeConverter<ILoggingEvent> {
  
    private static Pattern apiKeyPattern = Pattern.compile("DO_NOT_MATCH");

    public static void addApiKey(String apiKey) {
        apiKeyPattern = Pattern.compile(Pattern.quote(apiKey));
    }

    @Override
    protected String transform(ILoggingEvent event, String in) {
        if (in != null) {
            Matcher matcher = apiKeyPattern.matcher(in);
            if (matcher.find()) {
                return matcher.replaceAll("[APIKEY]");
            }
        }
        return in;
    }
}
```

### 3. Configure Logback to Use Your Converter

You would then need to configure Logback to use this converter by editing the `logback.xml` configuration file:

```xml
<configuration>
    <conversionRule conversionWord="maskMessage" converterClass="com.omertron.fanarttvapi.tools.MaskingPatternLayout"/>

    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %maskMessage{msg}%n%ex</pattern>
        </encoder>
    </appender>

    <root level="debug">
        <appender-ref ref="STDOUT" />
    </root>
</configuration>
```

### Summary

This conversion setup assumes you switch the underlying logging implementation from Log4j to Logback, which can directly use SLF4J. Note that while SLF4J simplifies handling different logging frameworks, it doesn’t manage layouting or filtering directly; these tasks are delegated to the specific implementation you choose (like Logback in this case).