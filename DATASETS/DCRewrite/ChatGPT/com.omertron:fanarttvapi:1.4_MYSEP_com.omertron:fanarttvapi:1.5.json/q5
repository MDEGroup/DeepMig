To migrate the `WrapperSeries` class from using Log4j to SLF4J, you need to update the import statements and the logger initialization. Here’s a step-by-step guide:

### 1. Change Import Statements
Switch the Log4j import statement to the corresponding SLF4J import:

```java
// Remove this
import org.apache.log4j.Logger;

// Add this
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
```

### 2. Modify Logger Initialization
Update the logger instantiation to use SLF4J's `LoggerFactory`:

Replace:
```java
private static final Logger logger = Logger.getLogger(WrapperSeries.class);
```

With:
```java
private static final Logger logger = LoggerFactory.getLogger(WrapperSeries.class);
```

### 3. Update Logging Usage
Ensure all logging statements use parameterized messages, which is a best practice with SLF4J to prevent unnecessary string concatenation when the logging level is not enabled. For example:

Replace:
```java
StringBuilder sb = new StringBuilder();
sb.append("Unknown property: '").append(key);
sb.append("' value: '").append(value).append("'");
logger.warn(sb.toString());
```

With:
```java
logger.warn("Unknown property: '{}' value: '{}'", key, value);
```

### Example of Updated Class Using SLF4J
Here's how the class might look after applying the changes:

```java
package com.omertron.fanarttvapi.model;

import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.EnumMap;
import java.util.List;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class WrapperSeries {
  private static final Logger logger = LoggerFactory.getLogger(WrapperSeries.class);
  
  @JsonProperty("thetvdb_id")
  private String tvdbid;
  
  @JsonProperty("clearlogo")
  private List<FanartTvArtwork> clearLogo;
  
  @JsonProperty("clearart")
  private List<FanartTvArtwork> clearArt;
  
  @JsonProperty("tvthumb")
  private List<FanartTvArtwork> tvThumb;
  
  @JsonProperty("seasonthumb")
  private List<FanartTvArtwork> seasonThumb;
  
  @JsonProperty("characterart")
  private List<FanartTvArtwork> characterArt;
  
  @JsonProperty("showbackground")
  private List<FanartTvArtwork> showBackground;
  
  @JsonProperty("hdclearart")
  private List<FanartTvArtwork> hdClearart;
  
  @JsonProperty("hdtvlogo")
  private List<FanartTvArtwork> hdTvLogo;
  
  // Methods...
  
  public Map<FTArtworkType, List<FanartTvArtwork>> getArtwork() {
    Map<FTArtworkType, List<FanartTvArtwork>> artwork = new EnumMap<>(FTArtworkType.class);
    artwork.put(FTArtworkType.CHARACTERART, this.characterArt);
    artwork.put(FTArtworkType.CLEARART, this.clearArt);
    artwork.put(FTArtworkType.CLEARLOGO, this.clearLogo);
    artwork.put(FTArtworkType.SEASONTHUMB, this.seasonThumb);
    artwork.put(FTArtworkType.TVTHUMB, this.tvThumb);
    artwork.put(FTArtworkType.SHOWBACKGROUND, this.showBackground);
    artwork.put(FTArtworkType.HDCLEARART, this.hdClearart);
    artwork.put(FTArtworkType.HDTVLOGO, this.hdTvLogo);
    return artwork;
  }
  
  @JsonAnySetter
  public void handleUnknown(String key, Object value) {
    logger.warn("Unknown property: '{}' value: '{}'", key, value);
  }
}
```

This conversion makes the `WrapperSeries` class utilize SLF4J, which offers flexibility in logging frameworks and improves performance due to its parameterized logging capabilities. Make sure similar changes are applied throughout the project to maintain consistency and fully leverage SLF4J’s benefits.