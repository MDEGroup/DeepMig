To migrate the given class from Log4j to SLF4J, you need to update the import statements, logger initialization, and logging method calls. Here are the necessary changes:

Update import statements for SLF4J.
Update the logger initialization to use SLF4J.
Below are the changes highlighted in the code:

java
Copia codice
package com.omertron.themoviedbapi.model;

import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.io.Serializable;
import java.util.List;
// Update import statement to use SLF4J
// import org.apache.log4j.Logger;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MovieDb implements Serializable {
  private static final long serialVersionUID = 1L;
  
  // Update logger initialization to use SLF4J
  // private static final Logger logger = Logger.getLogger(MovieDb.class);
  private static final Logger logger = LoggerFactory.getLogger(MovieDb.class);
  
  @JsonProperty("backdrop_path")
  private String backdropPath;
  
  @JsonProperty("id")
  private int id;
  
  @JsonProperty("original_title")
  private String originalTitle;
  
  @JsonProperty("popularity")
  private float popularity;
  
  @JsonProperty("poster_path")
  private String posterPath;
  
  @JsonProperty("release_date")
  private String releaseDate;
  
  @JsonProperty("title")
  private String title;
  
  @JsonProperty("adult")
  private boolean adult;
  
  @JsonProperty("belongs_to_collection")
  private Collection belongsToCollection;
  
  @JsonProperty("budget")
  private long budget;
  
  @JsonProperty("genres")
  private List<Genre> genres;
  
  @JsonProperty("homepage")
  private String homepage;
  
  @JsonProperty("imdb_id")
  private String imdbID;
  
  @JsonProperty("overview")
  private String overview;
  
  @JsonProperty("production_companies")
  private List<ProductionCompany> productionCompanies;
  
  @JsonProperty("production_countries")
  private List<ProductionCountry> productionCountries;
  
  @JsonProperty("revenue")
  private long revenue;
  
  @JsonProperty("runtime")
  private int runtime;
  
  @JsonProperty("spoken_languages")
  private List<Language> spokenLanguages;
  
  @JsonProperty("tagline")
  private String tagline;
  
  @JsonProperty("vote_average")
  private float voteAverage;
  
  @JsonProperty("vote_count")
  private int voteCount;
  
  @JsonProperty("status")
  private String status;
  
  public String getBackdropPath() {
    return this.backdropPath;
  }
  
  public int getId() {
    return this.id;
  }
  
  public String getOriginalTitle() {
    return this.originalTitle;
  }
  
  public float getPopularity() {
    return this.popularity;
  }
  
  public String getPosterPath() {
    return this.posterPath;
  }
  
  public String getReleaseDate() {
    return this.releaseDate;
  }
  
  public String getTitle() {
    return this.title;
  }
  
  public boolean isAdult() {
    return this.adult;
  }
  
  public Collection getBelongsToCollection() {
    return this.belongsToCollection;
  }
  
  public long getBudget() {
    return this.budget;
  }
  
  public List<Genre> getGenres() {
    return this.genres;
  }
  
  public String getHomepage() {
    return this.homepage;
  }
  
  public String getImdbID() {
    return this.imdbID;
  }
  
  public String getOverview() {
    return this.overview;
  }
  
  public List<ProductionCompany> getProductionCompanies() {
    return this.productionCompanies;
  }
  
  public List<ProductionCountry> getProductionCountries() {
    return this.productionCountries;
  }
  
  public long getRevenue() {
    return this.revenue;
  }
  
  public int getRuntime() {
    return this.runtime;
  }
  
  public List<Language> getSpokenLanguages() {
    return this.spokenLanguages;
  }
  
  public String getTagline() {
    return this.tagline;
  }
  
  public float getVoteAverage() {
    return this.voteAverage;
  }
  
  public int getVoteCount() {
    return this.voteCount;
  }
  
  public String getStatus() {
    return this.status;
  }
  
  public void setBackdropPath(String backdropPath) {
    this.backdropPath = backdropPath;
  }
  
  public void setId(int id) {
    this.id = id;
  }
  
  public void setOriginalTitle(String originalTitle) {
    this.originalTitle = originalTitle;
  }
  
  public void setPopularity(float popularity) {
    this.popularity = popularity;
  }
  
  public void setPosterPath(String posterPath) {
    this.posterPath = posterPath;
  }
  
  public void setReleaseDate(String releaseDate) {
    this.releaseDate = releaseDate;
  }
  
  public void setTitle(String title) {
    this.title = title;
  }
  
  public void setAdult(boolean adult) {
    this.adult = adult;
  }
  
  public void setBelongsToCollection(Collection belongsToCollection) {
    this.belongsToCollection = belongsToCollection;
  }
  
  public void setBudget(long budget) {
    this.budget = budget;
  }
  
  public void setGenres(List<Genre> genres) {
    this.genres = genres;
  }
  
  public void setHomepage(String homepage) {
    this.homepage = homepage;
  }
  
  public void setImdbID(String imdbID) {
    this.imdbID = imdbID;
  }
  
  public void setOverview(String overview) {
    this.overview = overview;
  }
  
  public void setProductionCompanies(List<ProductionCompany> productionCompanies) {
    this.productionCompanies = productionCompanies;
  }
  
  public void setProductionCountries(List<ProductionCountry> productionCountries) {
    this.productionCountries = productionCountries;
  }
  
  public void setRevenue(long revenue) {
    this.revenue = revenue;
  }
  
  public void setRuntime(int runtime) {
    this.runtime = runtime;
  }
  
  public void setSpokenLanguages(List<Language> spokenLanguages) {
    this.spokenLanguages = spokenLanguages;
  }
  
  public void setTagline(String tagline) {
    this.tagline = tagline;
  }
  
  public void setVoteAverage(float voteAverage) {
    this.voteAverage = voteAverage;
  }
  
  public void setVoteCount(int voteCount) {
    this.voteCount = voteCount;
  }
  
  public void setStatus(String status) {
    this.status = status;
  }
  
  @JsonAnySetter
  public void handleUnknown(String key, Object value) {
    StringBuilder sb = new StringBuilder();
    sb.append("Unknown property: '").append(key);
    sb.append("' value: '").append(value).append("'");
    logger.trace(sb.toString());
  }
  
  public boolean equals(Object obj) {
    if (obj == null)
      return false; 
    if (getClass() != obj.getClass())
      return false; 
    MovieDb other = (MovieDb)obj;
    if (this.id != other.id)
      return false; 
    if ((this.imdbID == null) ? (other.imdbID != null) : !this.imdbID.equals(other.imdbID))
      return false; 
    if (this.runtime != other.runtime)
      return false; 
    return true;
  }
  
  public int hashCode() {
    int hash = 5;
    hash = 89 * hash + this.id;
    hash = 89 * hash + ((this.imdbID != null) ? this.imdbID.hashCode() : 0);
    hash = 89 * hash + this.runtime;
    return hash;
  }
  
  public String toString() {
    StringBuilder sb = new StringBuilder("[MovieDB=");
    sb.append("[backdropPath=").append(this.backdropPath);
    sb.append("],[id=").append(this.id);
    sb.append("],[originalTitle=").append(this.originalTitle);
    sb.append("],[popularity=").append(this.popularity);
    sb.append("],[posterPath=").append(this.posterPath);
    sb.append("],[releaseDate=").append(this.releaseDate);
    sb.append("],[title=").append(this.title);
    sb.append("],[adult=").append(this.adult);
    sb.append("],[belongsToCollection=").append(this.belongsToCollection);
    sb.append("],[budget=").append(this.budget);
    sb.append("],[genres=").append(this.genres);
    sb.append("],[homepage=").append(this.homepage);
    sb.append("],[imdbID=").append(this.imdbID);
    sb.append("],[overview=").append(this.overview);
    sb.append("],[productionCompanies=").append(this.productionCompanies);
    sb.append("],[productionCountries=").append(this.productionCountries);
    sb.append("],[revenue=").append(this.revenue);
    sb.append("],[runtime=").append(this.runtime);
    sb.append("],[spokenLanguages=").append(this.spokenLanguages);
    sb.append("],[tagline=").append(this.tagline);
    sb.append("],[voteAverage=").append(this.voteAverage);
    sb.append("],[voteCount=").append(this.voteCount);
    sb.append("],[status=").append(this.status);
    sb.append("]]");
    return sb.toString();
  }
}
Summary of Changes:
Import Statements:
Replace import org.apache.log4j.Logger;